// Generated by CoffeeScript 1.7.1
(function() {
  var FormBuilder, StateMachine, Uploader, editorController;

  StateMachine = (function() {
    function StateMachine() {}

    StateMachine.prototype.currentState = ["nostate"];

    StateMachine.prototype.currentSnippet = null;

    StateMachine.prototype.controllerScopes = [];

    StateMachine.prototype.changeState = function(state, snippet) {
      var c, _i, _len, _ref, _results;
      if (snippet == null) {
        snippet = null;
      }
      this.currentState = state;
      if (snippet) {
        this.currentSnippet = snippet;
      }
      _ref = this.controllerScopes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        _results.push(c.$emit("editorStateChanged"));
      }
      return _results;
    };

    StateMachine.prototype.registerController = function(controller) {
      return this.controllerScopes.push(controller);
    };

    StateMachine.prototype.getCurrentState = function() {
      return this.currentState;
    };

    return StateMachine;

  })();

  silverflask_angular.factory('EditorState', function($rootScope) {
    window.statemachine = new StateMachine();
    return window.statemachine;
  });

  Uploader = (function() {
    Uploader.prototype.addProgressBar = function() {
      this.progressBarContainer = $("<div>").addClass("progress").css("width", this.snippetView.$elem.width());
      this.progressBarElement = $("<div>").addClass("progress-bar").css("width", "60%");
      this.progressBarContainer.append(this.progel);
      return $(this.snippetView.$elem).append(this.progressBarContainer);
    };

    Uploader.prototype.progressBarUpdate = function(val) {
      return this.progressBarElement.css("width", val + "%");
    };

    Uploader.prototype.progressBarRemove = function() {
      return this.progressBarContainer.remove();
    };

    function Uploader(snippet, snippetView) {
      var inputField, self;
      this.snippetView = snippetView;
      inputField = $("<input>", {
        'id': '#fileupload',
        'class': 'hidden',
        'name': "file",
        'type': 'file'
      });
      self = this;
      inputField.fileupload({
        dataType: 'json',
        url: '/admin/upload',
        dropZone: snippetView.$elem,
        progressall: function(e, data) {
          var progress;
          progress = parseInt(data.loaded / data.total * 100, 10);
          return self.progressBarUpdate(progress);
        },
        add: function(e, data) {
          var img, reader;
          snippetView.$elem.innerHTML = "Uploading";
          img = document.createElement("img");
          img.file = data.files[0];
          img.classList.add("obj");
          self.addProgressBar();
          reader = new FileReader;
          reader.onload = function(e) {
            return snippet.directives.get("image").setBase64Image(e.target.result);
          };
          reader.readAsDataURL(data.files[0]);
          return data.submit();
        },
        done: function(e, data) {
          var url;
          url = "http://" + window.location.host + data.result.files[0].url;
          snippet.setContent('image', {
            url: url
          });
          return self.progressBarRemove();
        }
      });
    }

    return Uploader;

  })();

  editorController = silverflask_angular.controller("EditorController", function($scope, $element, EditorState) {
    var addDefaultContent, editorElement, jsonField, jsonParsed, jsonValue, lvd, renderer, viewReady;
    addDefaultContent = function(lvd) {
      var snippet, text;
      lvd.model.append('mainAndSidebar');
      snippet = lvd.model.createSnippet('hero');
      lvd.model.first().append('main', snippet);
      text = lvd.model.createSnippet('text');
      return snippet.after(text);
    };
    $scope.$on("editorStateChanged", function() {
      return console.log("State Changed, fantastic!", EditorState.currentSnippet);
    });
    doc.design.load(design.bootstrap);
    editorElement = $element.children(".editor-section").first();
    jsonField = $("#" + editorElement.data("for") + "_json");
    jsonValue = jsonField.val();
    try {
      jsonParsed = JSON.parse(jsonValue);
      lvd = doc["new"]({
        data: jsonParsed,
        design: 'bootstrap'
      });
    } catch (_error) {
      lvd = doc["new"]({
        design: 'bootstrap'
      });
      addDefaultContent(lvd);
    }
    lvd.for_id = editorElement.data("for");
    window.livingdocs_elements.push(lvd);
    renderer = null;
    viewReady = lvd.createView(editorElement[0], {
      interactive: true
    });
    viewReady.done(function(returnValue) {
      var viewBody;
      returnValue.renderer.readySemaphore.callbacks.push(function(cb) {
        var snippetTree, snippetViews;
        snippetViews = returnValue.renderer.snippetViews;
        snippetTree = returnValue.renderer.snippetTree;
        return snippetTree.find("image").each(function(snippet) {
          var view;
          view = snippetViews[snippet.id];
          return view.uploader = new Uploader(snippet, view);
        });
      });
      renderer = returnValue.renderer;
      lvd.interactiveView.page.focus.snippetFocus.add(function(snippet) {
        return EditorState.changeState('selected', snippet);
      });
      viewBody = lvd.interactiveView.page.$body;
      lvd.interactiveView.page.imageClick.add(function() {
        return console.log("an image was clicked!");
      });
      lvd.interactiveView.snippetTree.snippetAdded.add(function(snippetModel) {
        var view;
        if (snippetModel.directives.image) {
          view = renderer.snippetViewForSnippet(snippetModel);
          return view.uploader = new Uploader(snippetModel, view);
        }
      });
      lvd.interactiveView.snippetTree.snippetHtmlChanged.add(function(snippet) {
        return console.log("After change", snippet);
      });
      return lvd.interactiveView.page.htmlElementClick.add(function() {
        return console.log("HTML ELEMENT Clicked");
      });
    });
    $scope.lvd = lvd;
    EditorState.registerController($scope);
    return null;
  });

  FormBuilder = (function() {
    function FormBuilder() {}

    FormBuilder.prototype.build = function(snippet, snippetTemplate) {
      var btn, el, prop, styles, val, _i, _len, _ref;
      styles = snippetTemplate.styles;
      console.log(this.parentElement);
      $(".lvd-form").empty();
      for (prop in styles) {
        switch (styles[prop].type) {
          case 'select':
            el = $("<select>").addClass("form-element");
            _ref = styles[prop].options;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              val = _ref[_i];
              el.append($("<option>").text(val.caption).val(val.value));
            }
            el.change(function(e) {
              var v;
              v = el.val();
              console.log(styles[prop], "changed!");
              return snippet.model.setStyle(prop, v);
            });
        }
        $(".lvd-form").append(el);
      }
      if (snippet.directives.image) {
        btn = $("<button>").addClass("btn").text("Crop Image");
        $(".lvd-form").append(btn);
        return btn.click(function() {
          return statemachine.changeState("crop");
        });
      }
    };

    return FormBuilder;

  })();

  silverflask_angular.controller("EditPane", function($scope, $element, EditorState) {
    var formbuilder;
    $scope.elementSelected = false;
    formbuilder = new FormBuilder();
    $scope.$on("editorStateChanged", function() {
      var currentSnippet;
      $scope.elementSelected = true;
      currentSnippet = EditorState.currentSnippet;
      formbuilder.build(currentSnippet, currentSnippet.model.template);
      return $scope.$apply();
    });
    $scope.design = $scope.$parent.lvd.design;
    $scope.templates = $scope.design.templates;
    $scope.newSnippetMousedownHandler = function(id) {
      var newSnippet;
      newSnippet = $scope.$parent.lvd.model.createModel(id);
      return doc.startDrag({
        snippetModel: newSnippet,
        event: event,
        config: {
          preventDefault: true,
          direct: true
        }
      });
    };
    $scope.deleteSnippet = function() {
      EditorState.currentSnippet.model.remove();
      $scope.elementSelected = false;
      return $scope.$apply();
    };
    return EditorState.registerController($scope);
  });

}).call(this);

//# sourceMappingURL=editor.map
