j = jQuery
import stdlib
import Notification

class Request:

    @staticmethod
    def send_json(url, request_data, success_handler=None, error_handler=None):
        if not success_handler:
            success_handler = Request.flash_handler
        if not error_handler:
            error_handler = Request.flash_handler
        return j.ajax({
            'type': 'POST',
            'url': url,
            'dataType': 'json',
            'contentType': 'application/json; charset=utf-8',
            'data': JSON.stringify(request_data),
            'success': success_handler,
            'error': error_handler
        })

    @staticmethod
    def flash_handler(response):
        if response["message"]:
            if response["type"]:
                t = response['type']
            else:
                t = None
            Notification(response["message"], t)
        else:
            Notification(response)



class SiteTree:

    def get_url(self, node):
        if node.id is '#':
            return '/admin/get_sitetree'
        else:
            return '/admin/get_sitetree/' + node.id

    def get_data(self, node):
        return {'id': node.id}

    def add_child_page(self):
        return None

    def delete_page(self):
        return None

    def get_menu_items(self):
        return {
            'renameItem': {
                'label': 'Add Child Page',
                'action': self.add_child_page
            },
            'deleteItem': {
                'label': 'Delete Page',
                'action': self.delete_page
            }
        }

    def on_dblclick(self, event, data):
        clicked_node = j(event.target).closest("a")
        window.location.href = clicked_node.attr("href")

    def on_move_node(self, event, data):
        if data.parent is not "#":
            new_parent_id = j("#" + data.parent).data('pageid')
        else:
            new_parent_id = None

        node_id = data.node.li_attr["data-pageid"]

        request_data = {
            'id': node_id,
            'new_parent': new_parent_id,
            'new_position': data.position
        }

        Request.send_json(self.sort_url, request_data)


    def __init__(self, node):
        self.node = node
        self.properties = node.data('properties')

        types = {}
        for key in dict.keys(self.properties):
            types[key] = {
                'valid_children': self.properties[key].allowed_children,
                'icon': self.properties[key].icon
            }

        self.tree = node.jstree({
            'core': {
                'check_callback': True,
                'data': {
                    'url': self.get_url,
                    'data': self.get_data
                },
                },
            'plugins': ['contextmenu', 'dnd', 'types'],
            'contextmenu': {
                'items': self.get_menu_items
            },
            'dnd': {
                'copy': False
            },
            'types': types
        })

        self.sort_url = self.node.data("sort_url")

        self.node.on('dblclick.jstree', j.proxy(self.on_dblclick, self))
        self.node.on('move_node.jstree', j.proxy(self.on_move_node, self))

def init():
    if document.querySelector("#tree"):
        SiteTree(j("#tree"))

j(document).on('silverflask:panel_ready', init)