j = jQuery
import stdlib
import Notification

class DOMNode:
    """
    A Dom Node that can attach events and everything
    """
    def __init__(self, node):
        self.node = node
        return self

    def connect(self, event, callback, capture=False):
        self.node.addEventListener(event, callback, capture)


class DOM:
    """
    A class wrapping several DOM methods
    """
    @staticmethod
    def select(self, selector, context=document):
        return DOMNode(context.querySelector(selector))

class GridField:
    """
    Grid Field Class wrapping DataTable in a pythonic way
    """
    @staticmethod
    def render_actions(data, type, row):
        return "<a href=\"" + data + "\">Edit</a>"

    def __init__(self, node):
        self.columns = []
        self.node = node
        for header in j('th', node):
            header = j(header)
            renderer = None
            if header.data('renderer'):
                renderer = GridField[header.data('renderer')]

            self.columns.append({'data': j(header).data('col'),
                                 'render': renderer})

        self.table = self.node.DataTable(
            ajax=self.node.data("ajax-url"),
            columns=self.columns,
            ordering=False,
            order= [2, "asc"]
        )

        if self.node.data('sortable'):
            self.node.dataTable().rowReordering({
                "sURL": self.node.data("sort-url"),
                "iIndexColumn": 2
            })

class UploadField:
    """
    Upload Field for async uploading of files and whatnot
    """
    def __init__(self, node):
        # self.input_template = """<input type="file" name="file"></input>"""
        self.url = '/admin/upload'

        self.node = node
        self.input = j("input[type='file']", self.node)
        self.preview_container = j('.preview_image', self.node)
        on_add = j.proxy(self.on_add, self)
        on_progress = j.proxy(self.on_progress, self)
        on_done = j.proxy(self.on_done, self)
        on_fail = j.proxy(self.on_fail, self)

        self.input.fileupload({
            'dataType': 'json',
            'url': self.url,
            'dropZone': self.node.children('.dropzone'),
            'progress': on_progress,
            'add': on_add,
            'done': on_done,
            'fail': on_fail
        })
        input = self.input
        window.input = input
        # self.node.children('.open-file-dialog').on('click',
        #     def(e):
        #         console.log(e)
        #         input.trigger(e)
        #         console.log("File DIAGLOGSS")
        # )

    def on_fail(self, event, data):
        console.log("Fail: ", event, data)

    def on_add(self, event, data):
        data.context = j('<p>').text("Uploading ... ")
        self.node.parent().append(data.context)

        self.current_image = j("<img>").addClass("obj")
        self.current_image.get(0).file = data.files[0]

        self.preview_container.append(self.current_image)

        reader = new FileReader()

        reader.onload = def(event):
            self.current_image.get(0).src = event.target.result

        reader.readAsDataURL(data.files[0])
        data.submit()

    def on_progress(self, event, data):
        print("Upload in progress")

    def on_done(self, event, data):
        console.log(event, data)
        url = "http://" + window.location.host + data.result.files[0].url
        console.log("Setting val to ", data.result.files[0].id)
        self.node.children("input[type='hidden']").val(data.result.files[0].id)

        for file in data.result.files:
            j('<p/>').text(file.name).appendTo(j('body'))





def init_gridfields():
    gridfields = []
    for field in j(".gridfield"):
        gridfields.push(GridField(j(field)))

def init_uploader():
    uploaders = []
    for u in j(".async-upload-container"):
        uploaders.push(UploadField(j(u)))

def on_ready():
    j(document).trigger("silverflask:panel_ready")
    init_gridfields()
    init_uploader()
    notifications = []
    for el in j('.alert'):
        notifications.push(Notification.init_from_node(j(el)))


j(document).on('ready', on_ready)
